generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
 url      = "postgres://default:LT4iHWwFe2Zr@ep-plain-wind-474194-pooler.us-east-1.postgres.vercel-storage.com/verceldb?pgbouncer=true&connect_timeout=15"
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
  shadowDatabaseUrl = env("POSTGRES_URL_NON_POOLING") // used for migrations
}

model SuperAdmin {
  name     String
  email    String @unique
  password String @unique
}

model Department {
  id                Int                   @id @unique @default(autoincrement())
  name              String                @unique
  coordinator_email String?               @unique
  Coordinator       Employee?             @relation(fields: [coordinator_email], references: [email])
  projects          Project[]
  employees         Employee_Department[]
  students          Student[]
  employee          Employee[]            @relation("emp_depart")
}

model Employee {
  name            String
  email           String                @unique
  password        String
  contact_no      String                @unique
  departments     Employee_Department[]
  department_name String?
  department      Department?           @relation("emp_depart", fields: [department_name], references: [name])
  projects        Employee_Project[]
  Coordinator     Department?
  Panel           Panel?                @relation(fields: [panelNumber], references: [id])
  panelNumber     Int?
}

model Employee_Department {
  employee_email  String
  department_name String
  employee        Employee   @relation(fields: [employee_email], references: [email])
  department      Department @relation(fields: [department_name], references: [name])

  @@id([department_name, employee_email])
}

model Student {
  reg_no                Int                            @unique
  name                  String
  email                 String                         @unique
  password              String
  contact_no            String                         @unique
  department_name       String
  department            Department                     @relation(fields: [department_name], references: [name])
  projectId             Int?
  project               Project?                       @relation(fields: [projectId], references: [id])
  verification_token    String?                        @unique
  isVerified            Boolean?
  project_admin         Project[]                      @relation("admin_student")
  ProjectJoiningRequest StudentProjectJoiningRequest[]
}

model Project {
  id                    Int                            @id @default(autoincrement())
  title                 String
  description           String
  status                ProjectStatus                  @default(PENDING)
  department            Department                     @relation(fields: [department_name], references: [name])
  department_name       String
  students              Student[]
  employee              Employee_Project[]
  attributes            Boolean                        @default(false)
  SDG                   Boolean                        @default(false)
  supervisor_accepted   Boolean                        @default(false)
  coSupervisor_accepted Boolean                        @default(false)
  admin_student_email   String?
  admin_student         Student?                       @relation("admin_student", fields: [admin_student_email], references: [email])
  student_request       StudentProjectJoiningRequest[]
  panelNumber           Int?
  Panel                 Panel?                         @relation(fields: [panelNumber], references: [id])
  Presentation_Scedule  Presentation_Scedule[]
}

model VerificationToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  email     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model StudentProjectJoiningRequest {
  id             Int     @unique @default(autoincrement())
  projectId      Int
  student_reg_no Int
  status         String  @default("PENDING")
  project        Project @relation(fields: [projectId], references: [id])
  student        Student @relation(fields: [student_reg_no], references: [reg_no])
}

model Employee_Project {
  id             Int           @unique @default(autoincrement())
  project_id     Int
  project        Project       @relation(fields: [project_id], references: [id])
  employee_email String
  employee       Employee      @relation(fields: [employee_email], references: [email])
  role           EmployeeRole
  status         RequestStatus @default(PENDING)

  @@id([project_id, employee_email])
}

model Panel {
  id        Int        @unique @default(autoincrement())
  projects  Project[]
  Employees Employee[]
}

model Rubrics {
  id                     Int                   @unique @default(autoincrement())
  statement              String
  marks                  Int?
  Presentation_Scedule   Presentation_Scedule? @relation(fields: [presentation_SceduleId], references: [id])
  presentation_SceduleId Int?
  evaluator              String?
}

model Presentation_Scedule {
  id                  Int                @unique @default(autoincrement())
  Presentation_number Int
  title               String
  date                DateTime
  venue               String
  Start_time          DateTime?
  End_time            DateTime?
  Rubrics             Rubrics[]
  projectId           Int
  Project             Project            @relation(fields: [projectId], references: [id])
  status              PresentationStatus @default(PENDING)
}

enum ProjectStatus {
  PENDING
  Recommend_further_work
  APPROVED
  COMPLETED
}

enum RequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

enum EmployeeRole {
  EVALUATOR
  ADVISOR
  CO_ADVISOR
}

enum PresentationStatus {
  PENDING
  STARTED
  COMPLETED
}
